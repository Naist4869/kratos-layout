// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: internal/conf/conf.proto

package conf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _conf_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Bootstrap with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Bootstrap) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOtel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Otel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BootstrapValidationError is the validation error returned by
// Bootstrap.Validate if the designated constraints aren't met.
type BootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapValidationError) ErrorName() string { return "BootstrapValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapValidationError{}

// Validate checks the field values on OTEL with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *OTEL) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CollectorEndpoint

	return nil
}

// OTELValidationError is the validation error returned by OTEL.Validate if the
// designated constraints aren't met.
type OTELValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OTELValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OTELValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OTELValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OTELValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OTELValidationError) ErrorName() string { return "OTELValidationError" }

// Error satisfies the builtin error interface
func (e OTELValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOTEL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OTELValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OTELValidationError{}

// Validate checks the field values on HTTP with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *HTTP) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Network

	// no validation rules for Addr

	if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// HTTPValidationError is the validation error returned by HTTP.Validate if the
// designated constraints aren't met.
type HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPValidationError) ErrorName() string { return "HTTPValidationError" }

// Error satisfies the builtin error interface
func (e HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPValidationError{}

// Validate checks the field values on GRPC with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *GRPC) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Network

	// no validation rules for Addr

	if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GRPCValidationError is the validation error returned by GRPC.Validate if the
// designated constraints aren't met.
type GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GRPCValidationError) ErrorName() string { return "GRPCValidationError" }

// Error satisfies the builtin error interface
func (e GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GRPCValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Server) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Mysql with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Mysql) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Addr

	// no validation rules for DbName

	// no validation rules for ShowLog

	// no validation rules for MaxOpenConn

	// no validation rules for MaxIdleConn

	if v, ok := interface{}(m.GetConnMaxLifeTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MysqlValidationError{
				field:  "ConnMaxLifeTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDriver() != "mysql" {
		return MysqlValidationError{
			field:  "Driver",
			reason: "value must equal mysql",
		}
	}

	return nil
}

// MysqlValidationError is the validation error returned by Mysql.Validate if
// the designated constraints aren't met.
type MysqlValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MysqlValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MysqlValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MysqlValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MysqlValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MysqlValidationError) ErrorName() string { return "MysqlValidationError" }

// Error satisfies the builtin error interface
func (e MysqlValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMysql.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MysqlValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MysqlValidationError{}

// Validate checks the field values on MongoDB with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MongoDB) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for AuthSource

	return nil
}

// MongoDBValidationError is the validation error returned by MongoDB.Validate
// if the designated constraints aren't met.
type MongoDBValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoDBValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoDBValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoDBValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoDBValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoDBValidationError) ErrorName() string { return "MongoDBValidationError" }

// Error satisfies the builtin error interface
func (e MongoDBValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongoDB.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoDBValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoDBValidationError{}

// Validate checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Redis) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Network

	// no validation rules for Addr

	// no validation rules for Password

	// no validation rules for Db

	if v, ok := interface{}(m.GetDialTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "DialTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetReadTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "ReadTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWriteTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "WriteTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIdleTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "IdleTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIdleCheckFrequency()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "IdleCheckFrequency",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RedisValidationError is the validation error returned by Redis.Validate if
// the designated constraints aren't met.
type RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisValidationError) ErrorName() string { return "RedisValidationError" }

// Error satisfies the builtin error interface
func (e RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisValidationError{}

// Validate checks the field values on Data with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Data) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Mysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Redis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMongodb()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataValidationError{
				field:  "Mongodb",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DataValidationError is the validation error returned by Data.Validate if the
// designated constraints aren't met.
type DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataValidationError) ErrorName() string { return "DataValidationError" }

// Error satisfies the builtin error interface
func (e DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataValidationError{}
